#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setmainfont{"微软雅黑"}
#+ATTR_LATEX: :width 5cm :options angle=90
#+TITLE: Learn JAVA
#+AUTHOR: Ray Yang
#+EMAIL: yangruipis@163.com
#+KEYWORDS: pascal
#+OPTIONS: H:4 toc:t 


* 概述

** 三种技术架构
- JAVA EE 企业版,主要针对web开发,分布式强大
- JAVA SE 标准版,普通个人和商务应用程序
- JAVA ME 小型版

** 特点
- 简单:无头文件,无指针,操作符重载
- 面向对象:不支持多继承,通过接口实现
- 分布式
- 稳健性
- 安全性
- 可移植性:java规范中无"依赖具体实现"的地方,比如所有整数都是32位,所有字符串都是unicode
- 解释性:直接执行 ~字节码~ 即可
- 高性能:即时编译器JIT
- 多线程
- 动态性:更偏动态语言

** 运行流程

1. javac命令对.java文件进行编译,生成.class文件(字节码) JDK
2. java命令运行字节码  JRE


* 基本语法

** 关键字

类似c#, 区别:

1. 类,方法和变量修饰符
   - extends    
   - final    
   - implements
   - native
   - strictfp
   - synchronized
   - transient
   - volatile
2. 包相关:
   - import
   - package (类似namespace)
3. 变量引用
   - super    
   - this    
   - void

** 标识符

规则:
1. 数字不可以开头
2. 不可以使用关键字
3. 严格区分大小写

** 数据类型

*** 整型

| 类型  | 存储需求 |
|-------+----------|
| int   | 4字节    |
| short | 2字节    |
| long  | 8字节    |
| byte  | 1字节    |

=注意:=
- java中,整数的范围与运行Java的机器无关,这就解决了软件在平台间的移植问题
- java中没有unsigned类型(我也不知道unsigned是啥)

*** 浮点型

| 类型   | 存储需求 |
|--------+----------|
| float  | 4字节    |
| double | 8字节    |

- 绝大多数程序都采用double类型
- 三个特殊的浮点值
  - 正无穷大(Double.POSITIVE_INFINITY)
  - 负无穷大(Double.NEGATIVE_INFINITY)
  - 缺失(Double.NaN)
- 浮点数采取二进制表示,无法精确表达分数1/10,所以2.0-1.1=0.899999(解决办法:BigDecimal)

*** boolean类型

- bool值不能和整型互相转化(python, C++可以)

*** 变量名定义

- 第一个单词字母小写,后面单词首字母大写: userName
- 记得初始化

*** 常量

- final 表示这个变量只能被赋值一次, 名称全部用大写

*** 自增和自减运算符

- ++n 先增加后引用
- n++ 先引用后增加

*** 三元操作符

int max = x > y ? x : y;

*** 逻辑运算符(同C#)

*** 调用math类

#+BEGIN_SRC java
import static java.lang.Math.*;
#+END_SRC











** 读取和输入

*** 输入
Scanner 对象

* 高级语法

* 特性


* tips
** 打印列表
#+BEGIN_SRC java
System.out.println(Arrays.toString(theItems));
#+END_SRC


println, print, printf区别：
- println 最后带换行符
- print   最后无换行符
- printf  源自c，可实现各种格式化字符串

** 迭代器使用

类继承Iterator接口，并且实现hasNext和next方法
#+BEGIN_SRC java
public class MyLinkedList<T> implements Iterator<T> {

    @Override
    public boolean hasNext() {
        return false;
    }

    @Override
    public T next() {
        return null;
    }
}
#+END_SRC
上述方法需要申明游标cursor，以不断地取数并且重置，而且经常会出现重置问题，因此我们可以通过一个内部类实现呢

#+BEGIN_SRC java
public class MyLinkedList<T> implements Iterator<T>{

// ...

  public theIterator getIterator(){
    return new theIterator();
  }

  private class theIterator implements Iterator<T>{ // 注意此时类型无需申明泛型，而接口需要申明泛型
    
    int cursor = 0;

    public boolean hasNext(){
      return cursor < size(); // 内部类可以调用外部方法
    }

    public T next(){
      if(theIterator.this.hasNext()){
        return theItems[cursor++];
      }
      else{
        throw new NoSuchElementException();
      }
    }
  }
}
#+END_SRC

此时通过外部调用getIterator()方法，获取迭代器实例，然后对实例进行
#+BEGIN_SRC java
theItarator iter = linkedlist.getIterator();
while(iter.hasNext()){
  T what_you_want  = iter.next()
}
#+END_SRC

** 语法糖查看
setting - editor - live Templates
或者 IntelliJ中 C-j

** TODO 泛型 [1/2]
- State "TODO"       from ""           [2017-12-12 周二 14:37]
*** DONE 泛型的接口继承
Comparable 接口:
#+BEGIN_SRC java
<T extends Comparable<? super T>>
#+END_SRC
其中，<? super T> 表示为类型通配符，表示对T的所有父类均适用，一直到Object类
如果是<? extends T> 同样为类型通配符，但是只能通配T的子类

*** TODO 泛型原理：类型擦除
- State "TODO"       from ""           [2017-12-12 周二 14:35]
类型擦除会带来诸多问题。


** 类型
*** int 和 Integer区别:
- int 是基本类型，直接存放数值， Integer 是对象，用一个引用指向该对象
- 初始化时，int初始化为0，Integer初始化为null
- Integer可以看成一个类，位Object的派生类，在申明时需要：Integer i = new Integer(10);，但是java具有自动装箱拆箱功能，所以可以写成Integer i = 10;
- 泛型参数只接受Object的派生，比如Integer, String, Double, Float，不接受基本类型



