
* Some notes

** pandas 操作
*** 得到行和或者是列和汇总：


#+BEGIN_SRC python :results output
  # -*- coding:utf-8 -*-
  import pandas as pd

  df = pd.DataFrame([(1,3,4), (3,2,1)])
  # 各列求和，得到新的列
  df['sum'] = df.apply(lambda x: x.sum(), axis=1)
  print(df.head())

  # 各行求和，添加新行
  df.loc['Row_sum'] = df.apply(lambda x: x.sum())
  print(df)
#+END_SRC

#+RESULTS:
:    0  1  2  sum
: 0  1  3  4    8
: 1  3  2  1    6
:          0  1  2  sum
: 0        1  3  4    8
: 1        3  2  1    6
: Row_sum  4  5  5   14

** numpy操作

*** 列表累加


#+BEGIN_SRC python :results output
  import numpy as np
  a = [1,2,3,4]
  print(np.cumsum(a))
#+END_SRC

#+RESULTS:
: [ 1  3  6 10]

*** 二维列表转一维

#+BEGIN_SRC python :results output
a = [[1,2], [3,4,5]]
print(sum(a, [])) # means [] + [1,2] + [3,4,5]
#+END_SRC

#+RESULTS:
: [1, 2, 3, 4, 5]

*** 字典合并

#+BEGIN_SRC python :results output
dict_1 = {'a': 1, 'c':4}
dict_2 = {'a':2, 'b':3}
print(dict(dict_1, **dict_2))

#+END_SRC

#+RESULTS:
: {'a': 2, 'c': 4, 'b': 3}

*** 更快的map
#+BEGIN_SRC python :results output
  import numpy as np
  sqrt = lambda x: np.sqrt(x)
  vec = np.vectorize(sqrt)
  print(vec(np.array([1,2,3,4])))
#+END_SRC

#+RESULTS:
: [ 1.          1.41421356  1.73205081  2.        ]

*** 找到最大/最小值索引
#+BEGIN_SRC python :results output
  import numpy as np
  test = np.array([1,2,3,4])
  print(np.argmax(test))
  print(np.where(test==test.max())[0])
#+END_SRC

#+RESULTS:
: 3
: [3]

*** 抽样
对应random，这里是np.random.choice
*** 向量对应元素相乘
np.multiply
*** np.ndarray.T适用范围
对一维数组无效，只针对多维数
