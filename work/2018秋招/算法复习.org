#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setmainfont{"微软雅黑"}
#+ATTR_LATEX: :width 5cm :options angle=90
#+TITLE: 算法复习
#+AUTHOR: 杨 睿
#+EMAIL: yangruipis@163.com
#+KEYWORDS: 
#+OPTIONS: H:4 toc:t 

* TODO 排序算法[1/3]

- State "TODO"       from              [2018-07-30 一 20:19]
** 冒泡排序

O(N2), O(N2), 稳定

#+BEGIN_SRC python :results output
  def bubble_sort(arr):
      for i in range(len(arr), 0, -1):
          for j in range(1, i):
              if arr[j-1] > arr[j]:
                  arr[j-1], arr[j] = arr[j], arr[j-1]
  arr=[3,2,4,1,5,0]
  bubble_sort(arr)
  print(arr)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 插入排序

O(n^2), O(N), 稳定

#+BEGIN_SRC python :results output
  def insertion_sort(arr):
      for i in range(1, len(arr)):
          temp = arr[i]
          j = i
          while arr[j-1] > temp and j > 0:
              arr[j] = arr[j-1]
              j -= 1
          arr[j] = temp
  arr = [3,2,4,1,5,0,6]
  insertion_sort(arr)
  print(arr)

#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6]




** 选择排序


#+BEGIN_SRC python :results output
  def select_sort(arr):
      for i in range(len(arr)):
          index = i
          for j in range(i, len(arr)):
              if arr[j] < arr[index]:
                  index = j
          arr[i], arr[index] = arr[index], arr[i]

  a = [3,2,4,1,5,0]
  select_sort(a)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 希尔排序

最坏情况小于等于O(N2)，视增量选取而定
- 增量为1， O(N2)，退化为插入排序
- Hibbard增量(h_i = 2 * h_{i-1} -1)，O(N^{3/2})


#+BEGIN_SRC python :results output
  import numpy as np

  def shell_sort(arr):
      gap = 4
      while gap > 0:
          for i in range(1, len(arr), gap):
              temp = arr[i]
              j = i
              while j - gap >= 0 and arr[j-gap] > temp:
                  arr[j] = arr[j-gap]
                  j -= gap
              arr[j] = temp
          gap = gap//2

  a = [3,2,4,1,5,0]
  shell_sort(a)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]



** 堆排序

略，见[[file:~/Documents/Data/mynotes/cs/algorithm/python/learning_algorithm/my_sort/heap_sort.py][堆排序python程序]]

注意时间复杂度：
- 建堆 O(n) 
- 堆排序 O(nlogn)

建堆O(n)证明：

堆高度 H = logN
- 最后一层非叶子节点最多下调1次，顶层非叶子节点最多下调H次
- 最后一层非叶子节点数目为2^(H-1)，顶层非叶子节点为2^0=1

S = 1*2^(H-1) + 2*2^(H-2) + ... + H*2^(H-H) = 2N - 2 - log2(N)，因此时间复杂度为O(N)

** 归并排序

思路：分治法


#+BEGIN_SRC python :results output
  def merge(arr1, arr2):
      i = j = 0
      res = []
      while i < len(arr1) and j < len(arr2):
          if arr1[i] < arr2[j]:
              res.append(arr1[i])
              i += 1
          else:
              res.append(arr2[j])
              j += 1

      if i == len(arr1):
          res += arr2[j:]
      else:
          res += arr1[i:]
      return res

  def merge_sort(arr):
      if len(arr) == 1:
          return arr

      center = len(arr) // 2
      left = merge_sort(arr[:center])
      right = merge_sort(arr[center:])
      return merge(left, right)


  a = [3, 2, 4,1,5,0]
  print(merge_sort(a))
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** DONE 快速排序

- State "DONE"       from "TODO"       [2018-07-25 三 19:02]
- State "TODO"       from              [2018-07-24 二 14:55]
**O(NlogN), O(N2)，为什么说快排优于堆排序：**
- 时间复杂度并不意味着真正的运行时间
- 堆排序做了很多无用功，比如把堆顶元素和堆尾元素互换，并不是每一次都逼近最有解

#+BEGIN_SRC python :results output
  def quick_sort(arr, i, j):

      if i >= j:
          return
      s=i
      e=j
      target = arr[j]
      while i < j:
          while i < j and arr[i] <= target:
              i += 1
          arr[j] = arr[i]
          while i < j and arr[j] > target:
              j -= 1
          arr[i] = arr[j]
      arr[i] = target
      quick_sort(arr, s, i-1)
      quick_sort(arr, i+1, e)

  a = [3,2,1,5,4,0]
  quick_sort(a, 0, len(a)-1)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]



*** DONE 非递归 快排

**通过队列实现**

#+BEGIN_SRC java
public static void QuickSortNoRecur(int[] arr){

        Queue<Pair<Integer, Integer>> queue = new LinkedList<>();
        queue.offer(new Pair<>(0,arr.length-1));
        while (!queue.isEmpty()){
            Pair<Integer, Integer> pair = queue.poll();
            int a = pair.getKey();
            int b = pair.getValue();
            if (a >= b)
                continue;
            int start = a;
            int end = b;
            int target = arr[b];
            while (a < b){
                while ((a < b) & (arr[a] <= target))
                    a += 1;
                arr[b] = arr[a];
                while ((a < b) & (arr[b] > target))
                    b -= 1;
                arr[a] = arr[b];
            }
            arr[a] = target;
            Pair<Integer, Integer> left_index = new Pair<>(start, a-1);
            Pair<Integer, Integer> right_index = new Pair<>(a+1, end);
            queue.offer(left_index);
            queue.offer(right_index);
        }


    }
#+END_SRC


** 桶排序


#+BEGIN_SRC python :results output
  def bucket_sort(arr):
      bucket = [0] * max(arr)
      ...
#+END_SRC



** TODO 基数排序

- State "TODO"       from              [2018-07-30 一 20:19]
优化桶排序，只需要0-9个桶，每一位上进行比较


** TODO 计数排序



- State "TODO"       from              [2018-07-30 一 20:19]
* 基于字符串的算法

* 基于线性表的算法



** 链表
- 详细程序见"./秋招复习/linked_list.py" and "/home/ray/Documents/Data/mynotes/cs/train/剑指offer"(Java)
- 参考：https://blog.csdn.net/lihongxun945/article/details/51233981
- 链表题主要考对指针的操作

*** 单链表翻转

*** 移除链表倒数第K个值 

*** 链表第m~n部分翻转：
思路：将m, m+1,...n-1个节点移动到节点n后面去

*** 链表


** 顺序表

*** 二分法取值


#+BEGIN_SRC python :results output
  def has_value(arr, value):
      left = 0
      right = len(arr) - 1

      while left <= right:
          center = (left + right) // 2
          temp =  arr[center]
          if temp > value:
              right = center - 1
          elif temp < value:
              left = center + 1
          else:
              return True
      return False

  print(has_value([1,2,3,5],5))
#+END_SRC

#+RESULTS:
: True



*** 求sqrt


#+BEGIN_SRC python :results output
  def sqrt(x):
      start = 0
      end = x
      while abs(start - end) >= 0.001:
          mid = (start + end) / 2
          val = mid**2
          if val > x:
              end = mid
          elif val < x:
              start = mid
          else:
              break
      return mid

  print(sqrt(5))
#+END_SRC

#+RESULTS:
: 2.2357177734375


*** 二值和问题(衍生三值、多值求和问题）


#+BEGIN_SRC python :results output
  def has_two_sum(arr, s):
      """
      arr有序时
      """
      i, j = 0, len(arr)-1
      while i <= j:
          if arr[i] + arr[j] < s:
              i += 1
          elif arr[i] + arr[j] > s:
              j -= 1
          else:
              return True
      return False

  def has_two_sum2(arr, s):
      my_set = set()
      for i in arr:
          p = s - i
          if i in my_set:
              return True
          my_set.add(p)
      return False

  print(has_two_sum2([1,2,4,5,7,8], 11))
#+END_SRC

#+RESULTS:
: True




*** 全排列问题 

- 无重复数字的全排列
- 有重复数字的全排列
- 下一个全排列
- 取特定位置的全排列

**** 有重复数字的全排列
#+BEGIN_SRC python :results output
  res = []
  def all_permutation(arr, i):
      """有重复数字的全排列
      """
      if i >= len(arr):
          res.append(arr[:])
      else:
          s = set()
          for j in range(i, len(arr)):
              if arr[j] in s:
                  continue
              arr[j], arr[i] = arr[i], arr[j]
              all_permutation(arr, i+1)
              arr[j], arr[i] = arr[i], arr[j]
              s.add(arr[j])
  all_permutation([1,2,2], 0)
  print(res)
#+END_SRC

#+RESULTS:
: [[1, 2, 2], [2, 1, 2], [2, 2, 1]]


**** 下一个全排列（字典序问题）

思路：
从尾到头的非递减子数组为k~n，将其上一个元素与子数组里面大于他的最小元素交换，同时对子数组从大到小排序


#+BEGIN_SRC python :results output
  def next_arr(arr):
      k = -1
      for i in range(len(arr)-1, 0, -1):
          if arr[i] > arr[i-1]:
              k = i
              break
      if k == -1:return list(reversed(arr))
      _min = 9999
      flag = -1
      for i in range(k, len(arr)):
          if arr[i] > arr[k-1] and arr[i] < _min:
              _min = arr[i]
              flag = i
      arr[k-1], arr[flag] = arr[flag], arr[k-1]
      arr[k:] = sorted(arr[k:])
      return arr

  print(next_arr([3,2,1]))
#+END_SRC

#+RESULTS:
: [1, 2, 3]






**** 第n个全排列

think about it

#+BEGIN_SRC python :results output
  import math
  def the_kst_permutation(arr, k, res):
      n = len(arr)
      if n == 1:
          res.append(arr[0])
          return
      arr.sort()
      fac = math.factorial(n-1)
      l = k // fac
      p = k % fac
      res.append(arr[l])
      arr.remove(arr[l])
      the_kst_permutation(arr, p, res)
  res = []
  the_kst_permutation([1,2,3,4], 13, res)
  print(res)


#+END_SRC

#+RESULTS:
: [3, 1, 4, 2]





*** topK相关问题

**** 堆解决

维护一个长为k的小顶堆，如果输入的值小于堆顶元素，则跳过，否则替换堆顶元素，并且调整堆
O(nlogn)
 
**** 快排解决


#+BEGIN_SRC python :results output
  def get_topk(arr, k):
      i = 0
      j = len(arr) - 1
      while 1:
          s = i
          e = j
          target = arr[j]
          while i < j:
              while i < j and arr[i] <= target:
                  i += 1
              arr[j] = arr[i]
              while i < j and arr[j] > target:
                  j -= 1
              arr[i] = arr[j]
          arr[i] = target
          if i == k:
              break
          elif i < k:
              i += 1
              j = e
          else:
              j = i-1
              i = s
      return arr[:k]

  print(get_topk([1,5,4,2,0], 3))

#+END_SRC

#+RESULTS:
: [0, 1, 2]






*** 最大连续子数组的和、乘积

**** 最大连续和
#+BEGIN_SRC python :results output
  def max_sum(arr):
      cur, _max = 0, 0
      for i in arr:
          cur = max(0, cur + i)
          _max = max(cur, _max)
      return _max

  print(max_sum([11,3,2,-1,-15,8,-10, 12]))
#+END_SRC

#+RESULTS:
: 16


**** 最大连续乘积

动态规划


#+BEGIN_SRC python :results output
  def max_times(arr):
      res = [[0 for i in range(3)] for i in range(len(arr))]
      res[0][0] = res[0][1] = res[0][2] = arr[0]
      for i, line in enumerate(res):
          print(res)
          if i != 0:
              res[i][1] = max(max(arr[i] * res[i-1][1], arr[i] * res[i-1][2]), arr[i])
              res[i][2] = min(min(arr[i] * res[i-1][1], arr[i] * res[i-1][2]), arr[i])
      return res

  print(max_times([1,3,-2,5,6,-1, -9]))
#+END_SRC

#+RESULTS:
: [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [3, -2, -6], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [3, -2, -6], [3, 5, -30], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [3, -2, -6], [3, 5, -30], [5, 30, -180], [0, 0, 0], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [3, -2, -6], [3, 5, -30], [5, 30, -180], [30, 180, -30], [0, 0, 0]]
: [[1, 1, 1], [1, 3, 3], [3, -2, -6], [3, 5, -30], [5, 30, -180], [30, 180, -30], [180, 270, -1620]]



* 基于树的算法

*** 树的遍历

见 tree.py




*** 二叉树判等


#+BEGIN_SRC python :results output
  def is_tree_equal(root1, root2):
      if root1 is None and root2 is None:
          return True

      if (root1 is None and root2 is not None) or (root1 is not None and root2 is None):
          return False

      if root1.val == root2.val:
          return is_tree_equal(root1.left, root2.left) and is_tree_equal(root1.right, root2.right)
      else:
          return False

#+END_SRC



*** 二叉树翻转


#+BEGIN_SRC python :results output
  def rotate_tree(root):

      if not root or (root.left is None and root.right is None):
          return root

      root.left, root.right = rotate_tree(root.right), rotate_tree(root.left)
      return root
#+END_SRC


*** 二叉树是否镜像


#+BEGIN_SRC python :results output
  def is_mirror_tree(root):
      return is_mirror(root.left, root.right)

  def is_mirror(root1, root2):
      if root1 is None and root2 is None:
          return True

      if root1 is None or root2 is None:
          return False

      if root1.val == root2.val:
          return is_mirror(root1.left, root2.right) and is_mirror(root1.right, root2.left)
      return Fase

#+END_SRC


*** 二叉树是否为另一颗子树(阿里暑期实习面试题)

略

* 基于图的算法


* 经典算法思路


** 回溯


** 分治

** 动态规划


** 
