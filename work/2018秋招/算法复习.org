#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setmainfont{"微软雅黑"}
#+ATTR_LATEX: :width 5cm :options angle=90
#+TITLE: 算法复习
#+AUTHOR: 杨 睿
#+EMAIL: yangruipis@163.com
#+KEYWORDS: 
#+OPTIONS: H:4 toc:t 

* 排序算法

** 冒泡排序

O(N2), O(N2), 稳定

#+BEGIN_SRC python :results output
  def bubble_sort(arr):
      for i in range(len(arr), 0, -1):
          for j in range(1, i):
              if arr[j-1] > arr[j]:
                  arr[j-1], arr[j] = arr[j], arr[j-1]
  arr=[3,2,4,1,5,0]
  bubble_sort(arr)
  print(arr)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 插入排序

O(n^2), O(N), 稳定

#+BEGIN_SRC python :results output
  def insertion_sort(arr):
      for i in range(1, len(arr)):
          temp = arr[i]
          j = i
          while arr[j-1] > temp and j > 0:
              arr[j] = arr[j-1]
              j -= 1
          arr[j] = temp
  arr = [3,2,4,1,5,0,6]
  insertion_sort(arr)
  print(arr)

#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5, 6]




** 选择排序


#+BEGIN_SRC python :results output
  def select_sort(arr):
      for i in range(len(arr)):
          index = i
          for j in range(i, len(arr)):
              if arr[j] < arr[index]:
                  index = j
          arr[i], arr[index] = arr[index], arr[i]

  a = [3,2,4,1,5,0]
  select_sort(a)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 希尔排序

最坏情况大于等于O(N2)，视增量选取而定


#+BEGIN_SRC python :results output
  import numpy as np

  def shell_sort(arr):
      gap = 4
      while gap > 0:
          for i in range(1, len(arr), gap):
              temp = arr[i]
              j = i
              while j - gap >= 0 and arr[j-gap] > temp:
                  arr[j] = arr[j-gap]
                  j -= gap
              arr[j] = temp
          gap = gap//2

  a = [3,2,4,1,5,0]
  shell_sort(a)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]



** 堆排序

略，见[[file:~/Documents/Data/mynotes/cs/algorithm/python/learning_algorithm/my_sort/heap_sort.py][堆排序python程序]]

注意时间复杂度：
- 建堆 O(n) 
- 堆排序 O(nlogn)

建堆O(n)证明：

堆高度 H = logN
- 最后一层非叶子节点最多下调1次，顶层非叶子节点最多下调H次
- 最后一层非叶子节点数目为2^(H-1)，顶层非叶子节点为2^0=1

S = 1*2^(H-1) + 2*2^(H-2) + ... + H*2^(H-H) = 2N - 2 - log2(N)，因此时间复杂度为O(N)

** 归并排序

思路：分治法


#+BEGIN_SRC python :results output
  def merge(arr1, arr2):
      i = j = 0
      res = []
      while i < len(arr1) and j < len(arr2):
          if arr1[i] < arr2[j]:
              res.append(arr1[i])
              i += 1
          else:
              res.append(arr2[j])
              j += 1

      if i == len(arr1):
          res += arr2[j:]
      else:
          res += arr1[i:]
      return res

  def merge_sort(arr):
      if len(arr) == 1:
          return arr

      center = len(arr) // 2
      left = merge_sort(arr[:center])
      right = merge_sort(arr[center:])
      return merge(left, right)


  a = [3, 2, 4,1,5,0]
  print(merge_sort(a))
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 快速排序


#+BEGIN_SRC python :results output
  def quick_sort(arr, i, j):

      if i >= j:
          return
      s=i
      e=j
      target = arr[j]
      while i < j:
          while i < j and arr[i] <= target:
              i += 1
          arr[j] = arr[i]
          while i < j and arr[j] > target:
              j -= 1
          arr[i] = arr[j]
      arr[i] = target
      quick_sort(arr, s, i-1)
      quick_sort(arr, i+1, e)

  a = [3,2,1,5,4,0]
  quick_sort(a, 0, len(a)-1)
  print(a)
#+END_SRC

#+RESULTS:
: [0, 1, 2, 3, 4, 5]


** 桶排序


#+BEGIN_SRC python :results output
  def bucket_sort(arr):
      bucket = [0] * max(arr)
      ...
#+END_SRC



** 基数排序



** 计数排序
