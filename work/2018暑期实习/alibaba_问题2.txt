我印象最深的项目是在CIC实习时制作的文本挖掘软件

项目介绍：
由于公司现有的文本挖掘系统线上压力较大，本项目致力于开发一个能在本地运行轻量级文本挖掘软件，并根据分析师最新的需求添加功能。现有功能包括:文本匹配（每条评论文本是评价哪个商品的）；报表生成（包括各种指标的计算，如赞数均值、评论数均值等）；情感分析（判断每句话的正负面程度）。

印象深刻原因：
第一个独立完成的项目，包括了需求对接与分析、软件设计、速度优化、算法实现与优化等。且软件在公司内部分析师中广泛使用，大大减小了公司分析系统的压力，且情感分析准确率在80%左右，具有实际的参考意义，我对公司能发挥自己的价值，获得成就感，因此印象深刻。

遇到的挑战：
1. 性能优化。分析师用以导入该软件的数据量大概在50万行以内，且均为长文本型数据，此时为了保证实际使用时不出现长时间的卡顿，窗体的优化、读取的优化、算法的优化都非常重要。我的解决方案是：(1) 选取朴素贝叶斯算法，采取SnowNLP项目中的方法，无需创建词频向量，而是每录入一条数据时直接根据命中的特征词，计算其正面或者是负面的概率，因此在空间上避免了超大稀疏矩阵存储。(2) 提前训练，在软件第一次打开时训练当前的训练集，由于是朴素贝叶斯，可以将特征词的概率序列化到本地，以后直接读取，如果遇到训练集变更，则进行增量训练。(3) 窗体延时加载，多线程，当点击计算时才开始读取文本，并且每读若干条后实时计算（计算开销非常小），完成后继续读取和计算，从而在面对超大数据时也可以流畅运行。

2. 用户希望增加匹配的规则，并且加入优先级，怎么办
现有系统中，文本的匹配逻辑只包括两种：关键词（“或”的关系）和排除词（“非”的关系），如果文本中含有某产品的关键词，则命中，如果是排除词，则排除。但是随着业务的发展，分析师们需要更多的逻辑，比如“且”的关系，甚至是括号指定优先级。此时系统无法处理，我的解决办法是：利用规则表达式，“+”表示且， “_”表示或，“-”表示非，“()”表示优先级，这样无论遇到多少复杂的规则，都可以添加进去。我在后台利用后缀表达式进行解析，然后按照后缀表达式，利用栈进行文本的匹配。
